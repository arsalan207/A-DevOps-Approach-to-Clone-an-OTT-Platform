To install jenkins in server in advance det

#!/bin/bash
sudo apt update -y
#sudo apt upgrade -y
wget -O - https://packages.adoptium.net/artifactory/api/gpg/key/public | tee /etc/apt/keyrings/adoptium.asc
echo "deb [signed-by=/etc/apt/keyrings/adoptium.asc] https://packages.adoptium.net/artifactory/deb $(awk -F= '/^VERSION_CODENAME/{print$2}' /etc/os-release) main" | tee /etc/apt/sources.list.d/adoptium.list
sudo apt update -y
sudo apt install temurin-17-jdk -y
/usr/bin/java --version
curl -fsSL https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key | sudo tee \
                  /usr/share/keyrings/jenkins-keyring.asc > /dev/null
echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] \
                  https://pkg.jenkins.io/debian-stable binary/ | sudo tee \
                              /etc/apt/sources.list.d/jenkins.list > /dev/null
sudo apt-get update -y
sudo apt-get install jenkins -y
sudo systemctl start jenkins
sudo systemctl status jenkins
-------------------------------

* Now check the status of the Jenkins it is running or not.

sudo systemctl status jenkins

*go in that path and check the password of jenkins.
$sudo cat /var/lib/jenkins/secrets/initialAdminPassword

** Now we will update our system.
$ sudo apt-get update

* Now we have to install the docker.
$ sudo apt-get install docker.io -y

* Now check the version of the docker.
$ docker --version

* if you want the more details about doctor.
$ docker version

*add the Ubuntu user to the docker group.
$ sudo usermod -aG docker ubuntu

* try to see the containers.
$ docker ps

* First we have to refresh our group.
$newgrp docker

* try to see the containers.
$ docker ps

*add the permissions to our docker .
$ sudo chmod 777 /var/run/docker.sock


* run the SonarQube To analyse our code.
$ docker run -d --name sonar -p 9000:9000 sonarqube:lts-community

* check images there or not.
$ docker ps

* First we have to open the Trivy File.
$ sudo nano trivy.sh


* Now we have to add some commands in this file.

sudo apt-get install wget apt-transport-https gnupg lsb-release -y
wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | gpg --dearmor | sudo tee /usr/share/keyrings/trivy.gpg > /dev/null
echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
sudo apt-get update
sudo apt-get install trivy -y
======================================================================


* give the execution permission.
$ sudo chmod +x trivy.sh

* now  install Trivy
$ sh trivy.sh

=====================================================

Prometheus and Grafana 
* Install Prometheus and Grafana On the new Server
* Connect with the moba xterm
* we have to create the user for the. Prometheus 

sudo useradd \
    --system \
    --no-create-home \
    --shell /bin/false prometheus
********************************************

* Now we have to download the Prometheus.

wget https://github.com/prometheus/prometheus/releases/download/v2.47.1/prometheus-2.47.1.linux-amd64.tar.gz


* Check it is downloaded or not.
$ ls -a 


* so we have to extract this file
$ tar -xvf prometheus-2.47.1.linux-amd64.tar.gz

* Now we have to create one directory.
$ sudo mkdir -p /data /etc/prometheus


* Now check the Prometheus
$ ll

* Now you have to go inside the Prometheus
$ cd prometheus-2.47.1.linux-amd64/

* Now check the files in this directory.
$ ls 

* Now we have to move this file into the usr/bin.
$ sudo mv prometheus promtool /usr/local/bin/

* Now check file is moved or not.
$ ll

* we have to move the consoles and consoles library. To the prometheus

$sudo mv consoles/ console_libraries/ /etc/prometheus/

* file is moved or not.
$ ll

Finally, let's move the example of the main Prometheus configuration file.
$ sudo mv prometheus.yml /etc/prometheus/prometheus.yml

* now check the file is moved or not.
$ ls



* Now we have to create one user. * create one group
$sudo useradd prometheus
sudo groupadd prometheus

To avoid permission issues, you need to set the correct ownership for the /etc/prometheus/ and data directory.
* Now we have to provide the permissions to the Prometheus
$ sudo chown -R prometheus:prometheus /etc/prometheus/ /data/

*Go back to the previous directory.
$ cd ..

* Now check the files.
$ ls


* So now we can delete this tar file
$rm -rf prometheus-2.47.1.linux-amd64.tar.gz

* Now check the files is delete or not..
$ ls

* Now we have to check the version of  Prometheus
$ prometheus --version


We're going to use Systemd, which is a system and service manager for Linux operating systems. 
For that, we need to create a Systemd unit configuration file

$ sudo nano /etc/systemd/system/prometheus.service

[Unit]
Description=Prometheus
Wants=network-online.target
After=network-online.target

StartLimitIntervalSec=500
StartLimitBurst=5

[Service]
User=prometheus
Group=prometheus
Type=simple
Restart=on-failure
RestartSec=5s
ExecStart=/usr/local/bin/prometheus \
  --config.file=/etc/prometheus/prometheus.yml \
  --storage.tsdb.path=/data \
  --web.console.templates=/etc/prometheus/consoles \
  --web.console.libraries=/etc/prometheus/console_libraries \
  --web.listen-address=0.0.0.0:9090 \
  --web.enable-lifecycle

[Install]
WantedBy=multi-user.target

----------------------------------------------------------------------------

To automatically start the Prometheus after reboot, run enable.
* Now we have to enable the Prometheus
$ sudo systemctl enable prometheus


* Now just we have to start the Prometheus.
$ sudo systemctl start prometheus


* Now check the status of the Prometheus.
$ sudo systemctl status prometheus


*First, let's create a system user for Node Exporter by running the following command:
$ sudo useradd \
    --system \
    --no-create-home \
    --shell /bin/false node_exporter


*You can download Node Exporter from the same page.

Use the wget command to download the binary.

$ wget https://github.com/prometheus/node_exporter/releases/download/v1.6.1/node_exporter-1.6.1.linux-amd64.tar.gz


* check node exporter is downloaded or not.
$ ls

*Extract the node exporter from the archive.
$ tar -xvf node_exporter-1.6.1.linux-amd64.tar.gz

*Move binary to the /usr/local/bin.
$ sudo mv \
  node_exporter-1.6.1.linux-amd64/node_exporter \
  /usr/local/bin/

* Check file is moved or not.
$ ls

*Clean up, and delete node_exporter archive and a folder.
$ rm -rf node_exporter*

* now check file is removed or not?
$ ls

*Verify that you can run the binary.
$ node_exporter --version

* Now we have to do some configuration.
$ sudo nano /etc/systemd/system/node_exporter.service

[Unit]
Description=Node Exporter
Wants=network-online.target
After=network-online.target

StartLimitIntervalSec=500
StartLimitBurst=5

[Service]
User=node_exporter
Group=node_exporter
Type=simple
Restart=on-failure
RestartSec=5s
ExecStart=/usr/local/bin/node_exporter \
    --collector.logind

[Install]
WantedBy=multi-user.target

=========================================
* Now we have to enable the node exporter.
$ sudo systemctl enable node_exporter

* Now we have to start the node exporter.
$ sudo systemctl start node_exporter

* Now check the status of the node exporter.
$ sudo systemctl status node_exporter


To create a static target, you need to add job_name with static_configs
$ sudo nano /etc/prometheus/prometheus.yml

* In this we have to add some configurations.
  - job_name: node_export
    static_configs:
      - targets: ["localhost:9100"]


* Now we have added this configuration now check the syntax is proper or not.
$ promtool check config /etc/prometheus/prometheus.yml

*Then, you can use a POST request to reload the config.
$ curl -X POST http://localhost:9090/-/reload

========================================================================

* Now we have to work on the grafana

*First, let's make sure that all the dependencies are installed.

$ sudo apt-get install -y apt-transport-https software-properties-common


*Next, add the GPG key.
$ wget -q -O - https://packages.grafana.com/gpg.key | sudo apt-key add -

*Add this repository for stable releases.
$ echo "deb https://packages.grafana.com/oss/deb stable main" | sudo tee -a /etc/apt/sources.list.d/grafana.list


*After you add the repository, update and
$sudo apt-get update

* install Garafana.
$ sudo apt-get -y install grafana


* Now we have to enable the Grafana.
$ sudo systemctl enable grafana-server

* We have to start the Grafana.
$ sudo systemctl start grafana-server

* We have to check the status of Grafana.
$ sudo systemctl status grafana-server

* Now we have to log into grafana GUI.
username is admin, and the password is admin as well.
username admin
password admin



* connect with grafana cli server
To create a static target, you need to add job_name with static_configs. go to Prometheus server
$ sudo nano /etc/prometheus/prometheus.yml

  - job_name: 'jenkins'
    metrics_path: '/prometheus'
    static_configs:
      - targets: ['<jenkins-ip>:8080']

* Now we have to check our syntaxes right or not?
$promtool check config /etc/prometheus/prometheus.yml

* Now we have to reload this.
$ curl -X POST http://localhost:9090/-/reload

========================================================================================================

Email Integration With Jenkins and Plugin Setup

======================================================================================================

 Install Plugins like JDK, Sonarqube Scanner, NodeJs, OWASP Dependency Check

Goto Manage Jenkins →Plugins → Available Plugins →

Install below plugins

1 → Eclipse Temurin Installer (Install without restart)

2 → SonarQube Scanner (Install without restart)

3 → NodeJs Plugin (Install Without restart)
==============================================================================
Configure Sonar Server in Manage Jenkins

==============================================
* Now check the images.
$ docker ps


* we have to go to proper location.
$ cd /var/lib/jenkins/workspace/Netflix

* Now check the files in this directory.
$  ls



* Now we have to build this file.
$docker build -t netflix:latest .

* Now check the docker images.
$ docker images

$ docker tag 1bbefe0da371 netflix:latest


* we have to run this.

docker run -d --name netflix -p 8081:80 netflix:latest

* Now Check the running containers.
$ docker ps


docker start 41dba3d6d62b

docker start -ai 41dba3d6d62b  

docker exec -it 41dba3d6d62b bin/bash 
c 41dba3d6d62b 